// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  // Below for Authentication
  id            Int             @id @default(autoincrement())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  googleId      String?         @unique

  // Below for MedKitty
  pets     Pet[]    @relation("UserPets")
}

model Account {
  id                Int         @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

model Session {
  id           Int       @id @default(autoincrement())
  sessionToken String    @unique
  userId       Int
  expires      DateTime
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}
 
model VerificationToken {
  id         Int       @id @default(autoincrement())
  identifier String
  token      String    @unique
  expires    DateTime
 
  @@unique([identifier, token])
}

model Pet {
  id     Int    @id @default(autoincrement())
  name   String
  breed  String
  age    Int
  owners User[] @relation("UserPets")

  medicationSchedules MedicationSchedule[]
}

model Medicine {
  id             Int    @id @default(autoincrement())
  name           String
  packagingDoses Int
  packagingUnit  String

  medicationSchedules MedicationSchedule[]
}

model MedicationSchedule {
  id                 Int      @id @default(autoincrement())
  petId              Int
  medicineId         Int
  dosage             Float
  intervalMinutes    Int
  lastAdministered   DateTime
  nextAdministration DateTime
  administeredCount  Int

  pet      Pet      @relation(fields: [petId], references: [id])
  medicine Medicine @relation(fields: [medicineId], references: [id])
}
