// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String          @id @default(uuid())
  foreignId      String          @unique
  name           String?
  email          String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  ownedPets      Pet[]           @relation("OwnerPets")
  caretakenPets  Pet[]           @relation("CaretakerPets")
  petInvitations PetInvitation[]
}

model PetInvitation {
  id     String           @id @default(uuid())
  petId  String
  userId String
  status InvitationStatus @default(PENDING)
  pet    Pet              @relation(fields: [petId], references: [id])
  user   User             @relation(fields: [userId], references: [id])
}

model Pet {
  id                  String                   @id @default(uuid())
  name                String
  species             String
  breed               String
  sex                 Sex
  owners              User[]                   @relation("OwnerPets")
  caretakers          User[]                   @relation("CaretakerPets")
  medicationSchedules MedicationScheduleItem[]
  invitations         PetInvitation[]
  dailyDoses          DailyDose[]
}

model Medicine {
  id         String      @id @default(uuid())
  name       String
  totalDoses Int
  doseUnit   String
  dailyDoses DailyDose[]
}

model DailyDose {
  id                  String                   @id @default(uuid())
  petId               String
  medicineId          String
  dosage              Float
  intervalMinutes     Int
  firstAdministration DateTime?
  administeredCount   Int                      @default(0)
  finalAdministration DateTime?
  pet                 Pet                      @relation(fields: [petId], references: [id])
  medicine            Medicine                 @relation(fields: [medicineId], references: [id])
  medicationSchedules MedicationScheduleItem[]
}

model MedicationScheduleItem {
  id                  String     @id @default(uuid())
  petId               String
  dailyDoseId         String
  administrationTimes DateTime[]
  administeredTimes   DateTime[]
  pet                 Pet        @relation(fields: [petId], references: [id])
  dailyDose           DailyDose  @relation(fields: [dailyDoseId], references: [id])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum Sex {
  FEMALE
  MALE
}
