// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model User {
  id               String              @id @default(uuid())
  foreignId        String              @unique
  name             String?
  email            String              @unique
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  ownedPets        Pet[]               @relation("OwnerPets")
  caretakenPets    Pet[]               @relation("CaretakerPets")
  petInvitations   PetInvitation[]
}

model Pet {
  id               String              @id @default(uuid())
  name             String
  breed            String
  age              Int
  owners           User[]              @relation("OwnerPets")
  caretakers       User[]              @relation("CaretakerPets")
  medicationSchedules MedicationSchedule[]
  invitations      PetInvitation[]
}

model PetInvitation {
  id               String              @id @default(uuid())
  petId            String
  userId           String
  status           InvitationStatus    @default(PENDING)
  pet              Pet                 @relation(fields: [petId], references: [id])
  user             User                @relation(fields: [userId], references: [id])
}

model Medicine {
  id                  String             @id @default(uuid())
  name                String
  packagingDoses      Int
  packagingUnit       String
  medicationSchedules MedicationSchedule[]
}

model MedicationSchedule {
  id                 String       @id @default(uuid())
  petId              String
  medicineId         String
  dosage             Float
  intervalMinutes    Int
  lastAdministered   DateTime
  nextAdministration DateTime
  administeredCount  Int
  pet                Pet          @relation(fields: [petId], references: [id])
  medicine           Medicine     @relation(fields: [medicineId], references: [id])
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

